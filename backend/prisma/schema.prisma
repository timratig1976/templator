generator client {
  provider = "prisma-client-js"
}

/// Prompt library: reusable prompts (optionally categorized by step/stepVersion),
/// with embedded prompt content and associated IR schema. No active state at library level.
model PromptAsset {
  id             String       @id @default(cuid())
  name           String
  description    String?
  tags           String[]
  owner          String?
  quality        Json?
  flags          Json?
  // Combined payload
  promptContent  Json         // messages/template/etc.
  irSchema       Json?        // optional IR schema paired with the prompt
  // Categorization
  stepId         String?
  stepVersionId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Reverse relations for StepVersion preferred pointers
  usedAsProduction StepVersion[] @relation("ProductionPrompt")
  usedAsDefault    StepVersion[] @relation("DefaultPrompt")

  @@index([stepId])
  @@index([stepVersionId])
  @@map("prompt_assets")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AILog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now()) @db.Timestamptz(3)
  level       String
  category    String?
  process     String?
  step        String?
  requestId   String?
  model       String?
  durationMs  Int?
  tokensTotal Int?
  tokensInput Int?
  tokensOutput Int?
  costUsd     Float?
  prompt      String?
  error       String?
  message     String?
  initiator   String?   // user, system, pipeline, etc.
  rag         Json?
  input       Json?
  output      Json?
  quality     Json?
  meta        Json?

  createdAt   DateTime @default(now())

  @@index([timestamp])
  @@index([process])
  @@index([level])
  @@index([category])
  @@index([requestId])
  @@map("ai_logs")
}

model SplitAsset {
  id         String      @id @default(cuid())
  splitId    String
  kind       String
  storageUrl String?
  meta       Json?
  order      Int?
  createdAt  DateTime    @default(now())
  projectId  String?
  projects   Project?    @relation(fields: [projectId], references: [id])
  split      DesignSplit @relation(fields: [splitId], references: [id])

  @@index([splitId])
  @@index([kind])
  @@index([projectId])
  @@map("split_assets")
}

model TestRun {
  id            String       @id @default(cuid())
  designSplitId String?
  artifactId    String?
  moduleId      String?
  type          String
  status        String
  startedAt     DateTime     @default(now())
  completedAt   DateTime?
  summary       Json?
  results       TestResult[]
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([artifactId])
  @@index([moduleId])
  @@map("test_run")
}

model TestResult {
  id         String   @id @default(cuid())
  testRunId  String
  name       String
  status     String
  durationMs Int
  details    Json?
  createdAt  DateTime @default(now())
  TestRun    TestRun  @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@map("test_result")
}

model ReviewFeedback {
  id            String       @id @default(cuid())
  designSplitId String?
  artifactId    String?
  moduleId      String?
  reviewer      String
  status        String
  ratings       Json?
  comments      String
  findings      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([artifactId])
  @@index([moduleId])
  @@map("review_feedback")
}

model Project {
  id               String        @id @default(cuid())
  name             String
  originalFileName String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  metadata         Json?
  splits           DesignSplit[]
  split_assets     SplitAsset[]

  @@map("projects")
}

model ModuleTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  complexity  String
  htmlContent String
  cssContent  String?
  jsContent   String?
  tags        String[]
  version     String   @default("1.0.0")
  usageCount  Int      @default(0)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("module_templates")
}

model PromptData {
  id         String         @id @default(cuid())
  pipelineId String
  sectionId  String?
  prompt     String
  context    Json?
  metadata   Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  results    PromptResult[]

  @@unique([pipelineId, sectionId])
  @@map("prompt_data")
}

model PromptResult {
  id           String     @id @default(cuid())
  promptDataId String
  result       String
  qualityScore Float?
  metrics      Json?
  createdAt    DateTime   @default(now())
  promptData   PromptData @relation(fields: [promptDataId], references: [id], onDelete: Cascade)

  @@map("prompt_results")
}

model PromptTemplate {
  id          String             @id @default(cuid())
  name        String
  description String?
  category    String
  basePrompt  String
  contexts    Json
  tags        String[]
  rating      Float?
  usageCount  Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  generations PromptGeneration[]

  @@map("prompt_templates")
}

model PromptGeneration {
  id             String         @id @default(cuid())
  templateId     String
  enhancedPrompt String
  result         String?
  rating         Float?
  feedback       String?
  contextData    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  template       PromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("prompt_generations")
}

model ModuleComponent {
  id                            String   @id @default(cuid())
  name                          String
  description                   String?
  category                      String
  type                          String
  complexity_level              String
  hubspot_version_compatibility String[]
  html_template                 String
  css_styles                    String?
  javascript_code               String?
  fields_definition             Json
  version                       String   @default("1.0.0")
  author                        String
  tags                          String[]
  quality_score                 Float    @default(0)
  usage_count                   Int      @default(0)
  validation_status             String
  rating                        Json
  dependencies                  Json
  interfaces                    Json
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  @@index([category])
  @@index([type])
  @@map("module_components")
}

model DesignUpload {
  id         String        @id @default(cuid())
  userId     String?
  filename   String
  mime       String
  size       Int
  checksum   String?
  storageUrl String?
  meta       Json?
  createdAt  DateTime      @default(now())
  splits     DesignSplit[]

  @@index([userId])
  @@map("design_uploads")
}

model DesignSplit {
  id                 String              @id @default(cuid())
  designUploadId     String
  status             String
  metrics            Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  projectId          String?
  designUpload       DesignUpload        @relation(fields: [designUploadId], references: [id], onDelete: Cascade)
  project            Project?            @relation(fields: [projectId], references: [id])
  generatedArtifacts GeneratedArtifact[]
  reviewFeedback     ReviewFeedback[]
  assets             SplitAsset[]
  testRuns           TestRun[]
  validationResults  ValidationResult[]

  @@index([designUploadId])
  @@index([status])
  @@index([projectId])
  @@map("design_splits")
}

model AIProcess {
  id          String     @id @default(cuid())
  name        String     @unique
  displayName String
  description String
  category    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  prompts     AIPrompt[]

  @@map("ai_processes")
}

model AIPrompt {
  id          String               @id @default(cuid())
  processId   String
  version     String
  title       String?
  description String?
  content     String
  metadata    Json?
  author      String?
  tags        String[]
  isActive    Boolean              @default(false)
  isDefault   Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  metrics     AIPromptMetrics[]
  testResults AIPromptTestResult[]
  process     AIProcess            @relation(fields: [processId], references: [id], onDelete: Cascade)
  // Back-relation to step versions that reference this prompt
  stepVersions StepVersion[]

  @@unique([processId, version])
  @@index([processId, isActive])
  @@map("ai_prompts")
}

model AIPromptTestResult {
  id            String   @id @default(cuid())
  promptId      String
  testFileId    String?
  testFileName  String?
  input         Json?
  output        Json?
  metrics       Json?
  status        String
  errorMessage  String?
  executionTime Int?
  createdAt     DateTime @default(now())
  prompt        AIPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([testFileId])
  @@map("ai_prompt_test_results")
}

model AIPromptMetrics {
  id           String   @id @default(cuid())
  promptId     String
  metricType   String
  value        Float
  unit         String?
  context      Json?
  calculatedAt DateTime @default(now())
  prompt       AIPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId, metricType])
  @@map("ai_prompt_metrics")
}

model StaticTestFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  complexity   String?
  tags         String[]
  description  String?
  uploadedBy   String?
  createdAt    DateTime @default(now())

  @@map("static_test_files")
}

model GeneratedArtifact {
  id            String       @id @default(cuid())
  designSplitId String?
  moduleId      String?
  type          String
  contentUrl    String?
  content       String?
  meta          Json?
  status        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([type])
  @@map("generated_artifacts")
}

model ValidationResult {
  id            String       @id @default(cuid())
  artifactId    String?
  designSplitId String?
  validator     String
  status        String
  message       String
  details       Json?
  createdAt     DateTime     @default(now())
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([artifactId])
  @@map("validation_results")
}

model PipelineDefinition {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  versions    PipelineVersion[]
  // Back-relation: project flows bound to this pipeline
  projectFlows ProjectFlow[]

  @@map("pipeline_definitions")
}

model PipelineVersion {
  id         String             @id @default(cuid())
  pipelineId String
  version    String
  isActive   Boolean            @default(false)
  dag        Json
  config     Json?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  runs       PipelineRun[]
  definition PipelineDefinition @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  // Back-relation: project flows pinned to this specific pipeline version
  pinnedForProjectFlows ProjectFlow[]

  @@unique([pipelineId, version])
  @@map("pipeline_versions")
}

model StepDefinition {
  id          String        @id @default(cuid())
  key         String        @unique
  name        String?
  description String?
  process     String?
  activeVersionId String?    @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  versions    StepVersion[]
  activeVersion StepVersion? @relation("ActiveStepVersion", fields: [activeVersionId], references: [id])
  // Back-relation: phases using this step
  phaseSteps  DomainPhaseStep[] @relation("PhaseStep_StepDefinition")

  @@map("step_definitions")
}

model StepVersion {
  id            String         @id @default(cuid())
  stepId        String
  version       String
  isActive      Boolean        @default(false)
  defaultConfig Json?
  // Step-scoped prompt content (temporary while migrating away from process-level prompts)
  prompt        Json?
  // Preferred prompt assets for this version
  productionPromptId String?
  defaultPromptId    String?
  aiPromptId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  irSchemas     IRSchema[]
  stepRuns      StepRun[]
  definition    StepDefinition @relation(fields: [stepId], references: [id], onDelete: Cascade)
  aiPrompt      AIPrompt?      @relation(fields: [aiPromptId], references: [id], onDelete: SetNull)
  productionPrompt PromptAsset? @relation("ProductionPrompt", fields: [productionPromptId], references: [id])
  defaultPrompt    PromptAsset? @relation("DefaultPrompt", fields: [defaultPromptId], references: [id])
  // Back-reference for StepDefinition.activeVersion
  activeForStep StepDefinition? @relation("ActiveStepVersion")
  // Back-relation: phases pinned to this specific version
  pinnedForPhaseSteps DomainPhaseStep[] @relation("PhaseStep_PinnedVersion")

  @@unique([stepId, version])
  @@map("step_versions")
}

model IRSchema {
  id            String      @id @default(cuid())
  stepVersionId String
  name          String
  version       String
  schema        Json
  isActive      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stepVersion   StepVersion @relation(fields: [stepVersionId], references: [id], onDelete: Cascade)

  @@unique([stepVersionId, version])
  @@map("ir_schemas")
}

model PipelineRun {
  id                String          @id @default(cuid())
  pipelineVersionId String
  status            String
  startedAt         DateTime        @default(now())
  completedAt       DateTime?
  summary           Json?
  origin            String          @default("frontend_user")
  originInfo        Json?
  PipelineVersion   PipelineVersion @relation(fields: [pipelineVersionId], references: [id], onDelete: Cascade)
  stepRuns          StepRun[]

  @@index([status])
  @@index([origin])
  @@map("pipeline_runs")
}

model StepRun {
  id            String           @id @default(cuid())
  pipelineRunId String
  stepVersionId String
  nodeKey       String
  status        String
  startedAt     DateTime         @default(now())
  completedAt   DateTime?
  params        Json?
  error         String?
  origin        String           @default("frontend_user")
  originInfo    Json?
  irArtifacts   IRArtifact[]
  metricResults MetricResult[]
  outputLinks   StepOutputLink[]
  PipelineRun   PipelineRun      @relation(fields: [pipelineRunId], references: [id], onDelete: Cascade)
  StepVersion   StepVersion      @relation(fields: [stepVersionId], references: [id], onDelete: Cascade)

  @@index([pipelineRunId])
  @@index([stepVersionId])
  @@index([nodeKey])
  @@index([origin])
  @@map("step_runs")
}

model IRArtifact {
  id               String   @id @default(cuid())
  stepRunId        String
  irJson           Json
  isValid          Boolean
  validationErrors Json?
  createdAt        DateTime @default(now())
  StepRun          StepRun  @relation(fields: [stepRunId], references: [id], onDelete: Cascade)

  @@index([stepRunId])
  @@map("ir_artifacts")
}

model MetricDefinition {
  id           String              @id @default(cuid())
  key          String              @unique
  name         String
  description  String?
  unit         String?
  target       Float?
  aggregation  String?
  scope        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  profileItems MetricProfileItem[]

  @@map("metric_definitions")
}

model MetricProfile {
  id          String              @id @default(cuid())
  name        String
  description String?
  isActive    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  items       MetricProfileItem[]

  @@map("metric_profiles")
}

model MetricProfileItem {
  id        String           @id @default(cuid())
  profileId String
  metricId  String
  weight    Float?
  threshold Float?
  config    Json?
  metric    MetricDefinition @relation(fields: [metricId], references: [id], onDelete: Cascade)
  profile   MetricProfile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([metricId])
  @@map("metric_profile_items")
}

model MetricResult {
  id          String   @id @default(cuid())
  stepRunId   String
  metricKey   String
  value       Float?
  stringValue String?
  passed      Boolean?
  details     Json?
  createdAt   DateTime @default(now())
  StepRun     StepRun  @relation(fields: [stepRunId], references: [id], onDelete: Cascade)

  @@index([stepRunId])
  @@index([metricKey])
  @@map("metric_results")
}

// Project Flows and Domain Phases
model ProjectFlow {
  id          String        @id @default(cuid())
  key         String        @unique
  name        String
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  phases      DomainPhase[]
  // Hybrid binding to a pipeline: default uses active PipelineVersion of the bound PipelineDefinition,
  // optionally pin to a specific PipelineVersion for reproducibility
  pipelineId               String?
  pinnedPipelineVersionId  String?
  pipeline                 PipelineDefinition? @relation(fields: [pipelineId], references: [id], onDelete: SetNull)
  pinnedPipelineVersion    PipelineVersion?    @relation(fields: [pinnedPipelineVersionId], references: [id], onDelete: SetNull)
 
  @@map("project_flows")
}

model DomainPhase {
  id          String        @id @default(cuid())
  flowId      String
  key         String
  name        String
  description String?
  orderIndex  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  flow        ProjectFlow   @relation(fields: [flowId], references: [id], onDelete: Cascade)
  steps       DomainPhaseStep[]
 
  @@unique([flowId, key])
  @@index([flowId])
  @@index([orderIndex])
  @@map("domain_phases")
}

model DomainPhaseStep {
  id                   String        @id @default(cuid())
  phaseId              String
  stepId               String        // StepDefinition
  pinnedStepVersionId  String?       // Optional pin to specific StepVersion
  orderIndex           Int           @default(0)
  params               Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  phase                DomainPhase   @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  step                 StepDefinition @relation("PhaseStep_StepDefinition", fields: [stepId], references: [id], onDelete: Restrict)
  pinnedVersion        StepVersion?  @relation("PhaseStep_PinnedVersion", fields: [pinnedStepVersionId], references: [id], onDelete: SetNull)

  @@index([phaseId])
  @@index([stepId])
  @@index([orderIndex])
  @@map("domain_phase_steps")
}

model StepOutputLink {
  id         String   @id @default(cuid())
  stepRunId  String
  targetType String
  targetId   String
  meta       Json?
  createdAt  DateTime @default(now())
  StepRun    StepRun  @relation(fields: [stepRunId], references: [id], onDelete: Cascade)

  @@index([stepRunId])
  @@index([targetType, targetId])
  @@map("step_output_links")
}
