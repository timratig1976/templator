generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SplitAsset {
  id         String      @id @default(cuid())
  splitId    String
  kind       String
  storageUrl String?
  meta       Json?
  order      Int?
  createdAt  DateTime    @default(now())
  projectId  String?
  projects   Project?    @relation(fields: [projectId], references: [id])
  split      DesignSplit @relation(fields: [splitId], references: [id])

  @@index([splitId])
  @@index([kind])
  @@index([projectId])
  @@map("split_assets")
}

model TestRun {
  id            String       @id @default(cuid())
  designSplitId String?
  artifactId    String?
  moduleId      String?
  type          String
  status        String
  startedAt     DateTime     @default(now())
  completedAt   DateTime?
  summary       Json?
  results       TestResult[]
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([artifactId])
  @@index([moduleId])
  @@map("test_run")
}

model TestResult {
  id         String   @id @default(cuid())
  testRunId  String
  name       String
  status     String
  durationMs Int
  details    Json?
  createdAt  DateTime @default(now())
  TestRun    TestRun  @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@map("test_result")
}

model ReviewFeedback {
  id            String       @id @default(cuid())
  designSplitId String?
  artifactId    String?
  moduleId      String?
  reviewer      String
  status        String
  ratings       Json?
  comments      String
  findings      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([artifactId])
  @@index([moduleId])
  @@map("review_feedback")
}

model Project {
  id               String        @id @default(cuid())
  name             String
  originalFileName String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  metadata         Json?
  splits           DesignSplit[]
  split_assets     SplitAsset[]

  @@map("projects")
}

model ModuleTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  complexity  String
  htmlContent String
  cssContent  String?
  jsContent   String?
  tags        String[]
  version     String   @default("1.0.0")
  usageCount  Int      @default(0)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("module_templates")
}

model PromptData {
  id         String         @id @default(cuid())
  pipelineId String
  sectionId  String?
  prompt     String
  context    Json?
  metadata   Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  results    PromptResult[]

  @@unique([pipelineId, sectionId])
  @@map("prompt_data")
}

model PromptResult {
  id           String     @id @default(cuid())
  promptDataId String
  result       String
  qualityScore Float?
  metrics      Json?
  createdAt    DateTime   @default(now())
  promptData   PromptData @relation(fields: [promptDataId], references: [id], onDelete: Cascade)

  @@map("prompt_results")
}

model PromptTemplate {
  id          String             @id @default(cuid())
  name        String
  description String?
  category    String
  basePrompt  String
  contexts    Json
  tags        String[]
  rating      Float?
  usageCount  Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  generations PromptGeneration[]

  @@map("prompt_templates")
}

model PromptGeneration {
  id             String         @id @default(cuid())
  templateId     String
  enhancedPrompt String
  result         String?
  rating         Float?
  feedback       String?
  contextData    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  template       PromptTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("prompt_generations")
}

model ModuleComponent {
  id                            String   @id @default(cuid())
  name                          String
  description                   String?
  category                      String
  type                          String
  complexity_level              String
  hubspot_version_compatibility String[]
  html_template                 String
  css_styles                    String?
  javascript_code               String?
  fields_definition             Json
  version                       String   @default("1.0.0")
  author                        String
  tags                          String[]
  quality_score                 Float    @default(0)
  usage_count                   Int      @default(0)
  validation_status             String
  rating                        Json
  dependencies                  Json
  interfaces                    Json
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  @@index([category])
  @@index([type])
  @@map("module_components")
}

model DesignUpload {
  id         String        @id @default(cuid())
  userId     String?
  filename   String
  mime       String
  size       Int
  checksum   String?
  storageUrl String?
  meta       Json?
  createdAt  DateTime      @default(now())
  splits     DesignSplit[]

  @@index([userId])
  @@map("design_uploads")
}

model DesignSplit {
  id                 String              @id @default(cuid())
  designUploadId     String
  status             String
  metrics            Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  projectId          String?
  designUpload       DesignUpload        @relation(fields: [designUploadId], references: [id], onDelete: Cascade)
  project            Project?            @relation(fields: [projectId], references: [id])
  generatedArtifacts GeneratedArtifact[]
  reviewFeedback     ReviewFeedback[]
  assets             SplitAsset[]
  testRuns           TestRun[]
  validationResults  ValidationResult[]

  @@index([designUploadId])
  @@index([status])
  @@index([projectId])
  @@map("design_splits")
}

model AIProcess {
  id          String     @id @default(cuid())
  name        String     @unique
  displayName String
  description String
  category    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  prompts     AIPrompt[]

  @@map("ai_processes")
}

model AIPrompt {
  id          String               @id @default(cuid())
  processId   String
  version     String
  title       String?
  description String?
  content     String
  metadata    Json?
  author      String?
  tags        String[]
  isActive    Boolean              @default(false)
  isDefault   Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  metrics     AIPromptMetrics[]
  testResults AIPromptTestResult[]
  process     AIProcess            @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, version])
  @@index([processId, isActive])
  @@map("ai_prompts")
}

model AIPromptTestResult {
  id            String   @id @default(cuid())
  promptId      String
  testFileId    String?
  testFileName  String?
  input         Json?
  output        Json?
  metrics       Json?
  status        String
  errorMessage  String?
  executionTime Int?
  createdAt     DateTime @default(now())
  prompt        AIPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([testFileId])
  @@map("ai_prompt_test_results")
}

model AIPromptMetrics {
  id           String   @id @default(cuid())
  promptId     String
  metricType   String
  value        Float
  unit         String?
  context      Json?
  calculatedAt DateTime @default(now())
  prompt       AIPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId, metricType])
  @@map("ai_prompt_metrics")
}

model StaticTestFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  complexity   String?
  tags         String[]
  description  String?
  uploadedBy   String?
  createdAt    DateTime @default(now())

  @@map("static_test_files")
}

model GeneratedArtifact {
  id            String       @id @default(cuid())
  designSplitId String?
  moduleId      String?
  type          String
  contentUrl    String?
  content       String?
  meta          Json?
  status        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([type])
  @@map("generated_artifacts")
}

model ValidationResult {
  id            String       @id @default(cuid())
  artifactId    String?
  designSplitId String?
  validator     String
  status        String
  message       String
  details       Json?
  createdAt     DateTime     @default(now())
  DesignSplit   DesignSplit? @relation(fields: [designSplitId], references: [id])

  @@index([designSplitId])
  @@index([artifactId])
  @@map("validation_results")
}
