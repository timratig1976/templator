'use client';

import { useState, useEffect } from 'react';
import { 
  PlayIcon, 
  DocumentDuplicateIcon, 
  DocumentTextIcon, 
  ArrowsRightLeftIcon, 
  BeakerIcon, 
  Cog6ToothIcon,
  EyeIcon,
  CheckCircleIcon,
  CheckIcon,
  XMarkIcon,
  FolderIcon 
} from '@heroicons/react/24/outline';
import PromptEditor from '@/components/admin/PromptEditor';
import StaticFileManager from '@/components/admin/StaticFileManager';
import SplitSimulationPanel from '@/components/admin/SplitSimulationPanel';
import PromptVersionManager from '@/components/admin/PromptVersionManager';

interface TestResult {
  id: string;
  timestamp: string;
  fileName: string;
  sectionsDetected: number;
  averageConfidence: number;
  processingTime: number;
  accuracy?: number;
  sections: any[];
}

export default function SplitDetectionPage() {
  const [currentPrompt, setCurrentPrompt] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isTestingPrompt, setIsTestingPrompt] = useState(false);
  const [testResults, setTestResults] = useState<TestResult[]>([]);
  const [currentResult, setCurrentResult] = useState<TestResult | null>(null);
  const [promptVersions, setPromptVersions] = useState<any[]>([]);
  const [activeTab, setActiveTab] = useState<'editor' | 'comparison' | 'results' | 'debug' | 'validation'>('editor');
  const [comparisonResults, setComparisonResults] = useState<TestResult[]>([]);
  const [showFileManager, setShowFileManager] = useState(false);
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const [validationMode, setValidationMode] = useState(false);
  const [groundTruth, setGroundTruth] = useState<any[]>([]);
  const [validationResults, setValidationResults] = useState<any>(null);
  const [isOptimizingPrompt, setIsOptimizingPrompt] = useState(false);
  const [optimizedPrompts, setOptimizedPrompts] = useState<string[]>([]);
  const [promptPerformance, setPromptPerformance] = useState<any[]>([]);
  const [validationDataset, setValidationDataset] = useState<any[]>([]);
  const [isRunningValidation, setIsRunningValidation] = useState(false);
  const [validationMetrics, setValidationMetrics] = useState<any>(null);
  const [debugActiveTab, setDebugActiveTab] = useState<'Details' | 'Performance' | 'Prompt' | 'Response'>('Details');
  const [editorActiveTab, setEditorActiveTab] = useState<'prompt' | 'visual'>('prompt');

  // Load current prompt on mount
  useEffect(() => {
    loadCurrentPrompt();
    loadPromptVersions();
  }, []);

  const loadCurrentPrompt = async () => {
    try {
      // This will load the current prompt from the backend
      const defaultPrompt = `ENHANCED LAYOUT SECTION DETECTION

Analyze this design image and identify distinct layout sections with high precision. Use these enhanced guidelines:

## SECTION DETECTION PRIORITIES:
1. **Visual Hierarchy**: Identify sections based on visual grouping, spacing, and hierarchy
2. **Semantic Meaning**: Recognize common web layout patterns (header, hero, features, testimonials, footer)
3. **Content Boundaries**: Detect natural content boundaries and logical groupings
4. **Responsive Considerations**: Consider how sections would adapt across screen sizes

## REQUIRED SECTION TYPES:
- **header**: Top navigation, logo, main menu
- **hero**: Primary banner, main value proposition, call-to-action
- **content**: Main content areas, text blocks, information sections
- **feature**: Feature highlights, service offerings, product showcases
- **testimonial**: Customer reviews, social proof, quotes
- **contact**: Contact forms, contact information, location details
- **footer**: Bottom navigation, copyright, secondary links
- **navigation**: Standalone navigation elements
- **sidebar**: Secondary content, widgets, complementary information
- **gallery**: Image galleries, portfolios, media collections

## ENHANCED ANALYSIS REQUIREMENTS:
1. **Bounding Box Accuracy**: Provide precise x, y, width, height coordinates
2. **Confidence Scoring**: Rate detection confidence (0.0-1.0) based on:
   - Visual clarity of section boundaries
   - Typical web layout patterns
   - Content coherence within section
3. **Detection Reasoning**: Explain why each section was identified
4. **Improvement Suggestions**: Suggest potential adjustments or alternatives

## TARGET SECTION COUNT:
Aim for 4-8 well-defined sections. Avoid over-segmentation.

Return enhanced JSON with this structure:
{
  "sections": [
    {
      "id": "section_1",
      "name": "Descriptive Section Name",
      "type": "header|hero|content|feature|testimonial|contact|footer|navigation|sidebar|gallery",
      "bounds": {
        "x": 0,
        "y": 0,
        "width": 800,
        "height": 100
      },
      "html": "Generated HTML for this section",
      "editableFields": [...],
      "aiConfidence": 0.85,
      "detectionReason": "Clear visual boundary with distinct header elements including logo and navigation",
      "suggestedImprovements": ["Consider adjusting height for better mobile responsiveness"]
    }
  ],
  "imageAnalysis": {
    "complexity": "medium",
    "layoutStyle": "modern|traditional|minimal|complex",
    "primaryColors": ["#color1", "#color2"],
    "designPatterns": ["grid-layout", "card-design", "hero-banner"]
  }
}`;
      
      setCurrentPrompt(defaultPrompt);
    } catch (error) {
      console.error('Failed to load current prompt:', error);
    }
  };

  const loadPromptVersions = async () => {
    try {
      // Mock data for now - will be replaced with API call
      const mockVersions = [
        {
          id: 'v1.2.3',
          version: 'v1.2.3',
          timestamp: '2024-01-15T10:30:00Z',
          author: 'Admin',
          description: 'Improved boundary detection accuracy',
          isActive: true,
          metrics: { accuracy: 85, avgConfidence: 0.81, avgSections: 4.8 }
        },
        {
          id: 'v1.2.2',
          version: 'v1.2.2',
          timestamp: '2024-01-10T14:20:00Z',
          author: 'Admin',
          description: 'Enhanced section type classification',
          isActive: false,
          metrics: { accuracy: 78, avgConfidence: 0.72, avgSections: 4.2 }
        }
      ];
      setPromptVersions(mockVersions);
    } catch (error) {
      console.error('Failed to load prompt versions:', error);
    }
  };

  const handleTestPrompt = async () => {
    if (!selectedFile || !currentPrompt.trim()) {
      alert('Please select a test file and ensure the prompt is not empty');
      return;
    }

    setIsTestingPrompt(true);
    
    try {
      // Convert file to base64 for testing
      const base64 = await fileToBase64(selectedFile);
      
      // Track processing time
      const startTime = performance.now();
      
      // Actual API call to test the prompt
      const response = await fetch('/api/ai-enhancement/detect-sections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          image: base64,
          prompt: currentPrompt,
          debug: true // Request debug information
        }),
      });

      // Calculate processing time
      const endTime = performance.now();
      const processingTime = Math.round(endTime - startTime);

      // Get raw response text first
      const rawResponseText = await response.text();
      
      // Check if response is successful
      if (!response.ok) {
        console.error('API Error:', response.status, rawResponseText);
        throw new Error(`API request failed with status ${response.status}: ${rawResponseText}`);
      }
      
      // Parse JSON from the raw text
      let data;
      try {
        data = JSON.parse(rawResponseText);
      } catch (parseError) {
        console.error('JSON Parse Error:', parseError);
        console.error('Raw response:', rawResponseText);
        throw new Error(`Invalid JSON response: ${rawResponseText.substring(0, 100)}...`);
      }
      
      // Store full debug information
      setDebugInfo({
        timestamp: new Date().toISOString(),
        request: {
          prompt: currentPrompt,
          imageSize: selectedFile.size,
          fileName: selectedFile.name
        },
        response: {
          ...data,
          processingTime: processingTime // Add calculated processing time
        },
        rawResponse: rawResponseText
      });

      // Backend returns "suggestions" array, map it to "sections" for frontend compatibility
      const sections = data.suggestions || [];
      
      const result: TestResult = {
        id: `test_${Date.now()}`,
        timestamp: new Date().toISOString(),
        fileName: selectedFile.name,
        sectionsDetected: sections.length,
        averageConfidence: sections.length > 0 
          ? sections.reduce((acc: number, s: any) => acc + (s.confidence || s.aiConfidence || 0), 0) / sections.length
          : 0,
        processingTime: data.meta?.processingTime || processingTime, // Use backend time if available, otherwise frontend calculation
        accuracy: data.accuracy || 0,
        sections: sections.map((s: any) => ({
          ...s,
          aiConfidence: s.confidence || s.aiConfidence || 0, // Normalize confidence field
          id: s.id || `section_${Math.random().toString(36).substr(2, 9)}` // Ensure each section has an ID
        }))
      };

      setTestResults(prev => [result, ...prev.slice(0, 9)]); // Keep last 10 results
      setCurrentResult(result);
      
    } catch (error) {
      console.error('Failed to test prompt:', error);
      alert('Failed to test prompt. Please try again.');
    } finally {
      setIsTestingPrompt(false);
    }
  };

  const handleOptimizePrompt = async () => {
    if (!currentPrompt.trim()) {
      alert('Please enter a prompt to optimize');
      return;
    }

    setIsOptimizingPrompt(true);
    
    try {
      // Get recent performance data for context
      const recentResults = testResults.slice(0, 5);
      const avgAccuracy = recentResults.reduce((acc, r) => acc + r.accuracy, 0) / recentResults.length || 0;
      const avgConfidence = recentResults.reduce((acc, r) => acc + r.averageConfidence, 0) / recentResults.length || 0;
      
      const optimizationPrompt = `You are an expert prompt engineer specializing in computer vision tasks. 

TASK: Optimize this prompt for web layout section detection to improve accuracy and reliability.

CURRENT PROMPT:
${currentPrompt}

PERFORMANCE ANALYSIS:
- Current accuracy: ${avgAccuracy.toFixed(1)}% (target: >85%)
- Average confidence: ${avgConfidence.toFixed(2)} (target: >0.8)
- Recent test results: ${recentResults.length} tests
- Common issues: Section boundary detection, type classification

REQUIREMENTS:
1. Generate 3 improved prompt variations
2. Focus on clearer section type definitions
3. Improve boundary detection instructions
4. Add confidence calibration guidance
5. Maintain JSON response format

Return as JSON array of optimized prompts with explanations.`;

      const response = await fetch('/api/ai-enhancement/optimize-prompt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          optimizationPrompt,
          currentPrompt,
          performanceData: {
            accuracy: avgAccuracy,
            confidence: avgConfidence,
            recentResults
          }
        }),
      });

      const data = await response.json();
      setOptimizedPrompts(data.optimizedPrompts || []);
      
    } catch (error) {
      console.error('Failed to optimize prompt:', error);
      alert('Failed to optimize prompt. Please try again.');
    } finally {
      setIsOptimizingPrompt(false);
    }
  };

  // Validation Framework Functions
  const calculateIoU = (box1: any, box2: any) => {
    const x1 = Math.max(box1.x, box2.x);
    const y1 = Math.max(box1.y, box2.y);
    const x2 = Math.min(box1.x + box1.width, box2.x + box2.width);
    const y2 = Math.min(box1.y + box1.height, box2.y + box2.height);
    
    if (x2 <= x1 || y2 <= y1) return 0;
    
    const intersection = (x2 - x1) * (y2 - y1);
    const area1 = box1.width * box1.height;
    const area2 = box2.width * box2.height;
    const union = area1 + area2 - intersection;
    
    return intersection / union;
  };

  const validateAgainstGroundTruth = (predictions: any[], groundTruth: any[], iouThreshold = 0.5) => {
    let truePositives = 0;
    let falsePositives = 0;
    let falseNegatives = 0;
    const matchedGT = new Set();
    const detectionDetails: any[] = [];

    // For each prediction, find best matching ground truth
    predictions.forEach(pred => {
      let bestMatch = null;
      let bestIoU = 0;
      
      groundTruth.forEach((gt, gtIndex) => {
        if (matchedGT.has(gtIndex) || pred.type !== gt.type) return;
        
        const iou = calculateIoU(pred.bounds, gt.bounds);
        if (iou > bestIoU) {
          bestIoU = iou;
          bestMatch = gtIndex;
        }
      });

      if (bestMatch !== null && bestIoU >= iouThreshold) {
        truePositives++;
        matchedGT.add(bestMatch);
        detectionDetails.push({
          type: 'TP',
          prediction: pred,
          groundTruth: groundTruth[bestMatch],
          iou: bestIoU
        });
      } else {
        falsePositives++;
        detectionDetails.push({
          type: 'FP',
          prediction: pred,
          groundTruth: null,
          iou: bestIoU
        });
      }
    });

    // Count unmatched ground truth as false negatives
    falseNegatives = groundTruth.length - matchedGT.size;
    groundTruth.forEach((gt, index) => {
      if (!matchedGT.has(index)) {
        detectionDetails.push({
          type: 'FN',
          prediction: null,
          groundTruth: gt,
          iou: 0
        });
      }
    });

    const precision = truePositives / (truePositives + falsePositives) || 0;
    const recall = truePositives / (truePositives + falseNegatives) || 0;
    const f1Score = 2 * (precision * recall) / (precision + recall) || 0;

    return {
      truePositives,
      falsePositives,
      falseNegatives,
      precision,
      recall,
      f1Score,
      detectionDetails
    };
  };

  const runValidationSuite = async () => {
    if (validationDataset.length === 0) {
      alert('Please load validation dataset first');
      return;
    }

    setIsRunningValidation(true);
    
    try {
      const results = [];
      
      for (const testCase of validationDataset) {
        // Run AI detection on test image
        const response = await fetch('/api/ai-enhancement/detect-sections', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            image: testCase.imageBase64,
            prompt: currentPrompt
          }),
        });

        const aiResult = await response.json();
        
        // Validate against ground truth
        const validation = validateAgainstGroundTruth(
          aiResult.sections || [],
          testCase.groundTruth,
          0.5
        );

        results.push({
          testCase: testCase.name,
          aiSections: aiResult.sections?.length || 0,
          gtSections: testCase.groundTruth.length,
          ...validation
        });
      }

      // Calculate overall metrics
      const totalTP = results.reduce((sum, r) => sum + r.truePositives, 0);
      const totalFP = results.reduce((sum, r) => sum + r.falsePositives, 0);
      const totalFN = results.reduce((sum, r) => sum + r.falseNegatives, 0);
      
      const overallPrecision = totalTP / (totalTP + totalFP) || 0;
      const overallRecall = totalTP / (totalTP + totalFN) || 0;
      const overallF1 = 2 * (overallPrecision * overallRecall) / (overallPrecision + overallRecall) || 0;
      const avgIoU = results.reduce((sum, r) => {
        const validIoUs = r.detectionDetails.filter((d: any) => d.type === 'TP').map((d: any) => d.iou);
        return sum + (validIoUs.reduce((s, iou) => s + iou, 0) / validIoUs.length || 0);
      }, 0) / results.length;

      setValidationMetrics({
        overallPrecision,
        overallRecall,
        overallF1,
        avgIoU,
        totalTests: results.length,
        results,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Validation failed:', error);
      alert('Validation failed. Please try again.');
    } finally {
      setIsRunningValidation(false);
    }
  };

  const loadValidationDataset = async () => {
    try {
      // Load predefined validation dataset
      const response = await fetch('/api/admin/validation-dataset');
      const dataset = await response.json();
      setValidationDataset(dataset);
    } catch (error) {
      console.error('Failed to load validation dataset:', error);
      // Create sample validation dataset
      setValidationDataset([
        {
          name: 'E-commerce Homepage',
          imageBase64: 'sample_image_data',
          groundTruth: [
            { id: 'header_1', type: 'header', bounds: { x: 0, y: 0, width: 1200, height: 80 } },
            { id: 'hero_1', type: 'hero', bounds: { x: 0, y: 80, width: 1200, height: 400 } },
            { id: 'content_1', type: 'content', bounds: { x: 0, y: 480, width: 1200, height: 600 } },
            { id: 'footer_1', type: 'footer', bounds: { x: 0, y: 1080, width: 1200, height: 120 } }
          ]
        }
      ]);
    }
  };

  const handleSaveVersion = async () => {
    const version = prompt('Enter version name (e.g., v1.2.4):');
    const description = prompt('Enter version description:');
    
    if (!version || !description) return;

    try {
      const newVersion = {
        id: version,
        version,
        timestamp: new Date().toISOString(),
        author: 'Admin',
        description,
        isActive: false,
        prompt: currentPrompt,
        metrics: currentResult ? {
          accuracy: currentResult.accuracy || 0,
          avgConfidence: currentResult.averageConfidence,
          avgSections: currentResult.sectionsDetected
        } : null
      };

      setPromptVersions(prev => [newVersion, ...prev]);
      alert(`Version ${version} saved successfully!`);
    } catch (error) {
      console.error('Failed to save version:', error);
      alert('Failed to save version. Please try again.');
    }
  };

  const handleSetAsDefault = async () => {
    if (!confirm('Set this prompt as the default for split detection?')) return;

    try {
      // Mock API call to set as default
      console.log('Setting prompt as default:', currentPrompt);
      alert('Prompt set as default successfully!');
    } catch (error) {
      console.error('Failed to set as default:', error);
      alert('Failed to set as default. Please try again.');
    }
  };

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = error => reject(error);
    });
  };

  const tabs = [
    { id: 'editor', name: 'Prompt Editor', icon: DocumentTextIcon },
    { id: 'comparison', name: 'Compare Results', icon: ArrowsRightLeftIcon },
    { id: 'results', name: 'Test Results', icon: BeakerIcon },
    { id: 'debug', name: 'AI Debug', icon: Cog6ToothIcon },
    { id: 'validation', name: 'Quality Validation', icon: CheckCircleIcon }
  ];

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex justify-between items-center">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">AI Split Detection Testing</h2>
            <p className="mt-1 text-gray-600">
              Edit prompts, compare results, and refine AI section detection
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setShowFileManager(!showFileManager)}
              className={`inline-flex items-center px-3 py-2 border rounded-md text-sm font-medium ${
                showFileManager 
                  ? 'border-blue-500 text-blue-700 bg-blue-50'
                  : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50'
              }`}
            >
              <Cog6ToothIcon className="h-4 w-4 mr-2" />
              {selectedFile ? selectedFile.name : 'Select File'}
            </button>
            <button
              onClick={handleSaveVersion}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              <DocumentDuplicateIcon className="h-4 w-4 mr-2" />
              Save Version
            </button>
            <button
              onClick={handleSetAsDefault}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              <CheckIcon className="h-4 w-4 mr-2" />
              Set as Default
            </button>
          </div>
        </div>
        
        {/* Tab Navigation */}
        <div className="mt-4">
          <nav className="flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`flex items-center py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-4 w-4 mr-2" />
                  {tab.name}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* File Manager Overlay */}
      {showFileManager && (
        <div className="absolute inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[80vh] overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
              <h3 className="text-lg font-semibold text-gray-900">Select Test File</h3>
              <button
                onClick={() => setShowFileManager(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <XMarkIcon className="h-6 w-6" />
              </button>
            </div>
            <div className="p-6">
              <StaticFileManager
                selectedFile={selectedFile}
                onFileSelect={(file) => {
                  setSelectedFile(file);
                  setShowFileManager(false);
                }}
              />
            </div>
          </div>
        </div>
      )}

      {/* Main Content Area */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'editor' && (
          <div className="h-full">
            {/* Sub-tabs for Editor */}
            <div className="bg-white border-b border-gray-200 mb-6">
              <nav className="flex space-x-8 px-4">
                {(['prompt', 'visual'] as const).map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setEditorActiveTab(tab)}
                    className={`py-3 px-1 border-b-2 text-sm font-medium ${
                      editorActiveTab === tab
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    {tab === 'prompt' ? 'Prompt Editor' : 'Visual Results'}
                  </button>
                ))}
              </nav>
            </div>

            {editorActiveTab === 'prompt' && (
              <div className="h-full bg-white rounded-lg border border-gray-200 p-6">
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900">Prompt Editor</h3>
                  <p className="text-sm text-gray-600">Edit and test AI prompts for split detection</p>
                </div>
                
                <div className="space-y-4 h-full flex flex-col">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Current Prompt
                    </label>
                    <textarea
                      value={currentPrompt}
                      onChange={(e) => setCurrentPrompt(e.target.value)}
                      className="w-full h-full min-h-96 p-4 border border-gray-300 rounded-lg text-sm font-mono resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter your AI prompt here..."
                    />
                  </div>
                  
                  <div className="flex justify-between items-center pt-4 border-t border-gray-200">
                    <div className="text-sm text-gray-500">
                      {selectedFile ? `Testing with: ${selectedFile.name}` : 'Select a test file to enable testing'}
                    </div>
                    <button
                      onClick={handleTestPrompt}
                      disabled={isTestingPrompt || !selectedFile}
                      className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-sm font-medium"
                    >
                      {isTestingPrompt ? 'Testing...' : 'Run Test'}
                    </button>
                </div>
              </div>
            )}

            {editorActiveTab === 'visual' && (
              <div className="h-full">
                {currentResult && selectedFile ? (
                  <div className="h-full bg-white rounded-lg border border-gray-200">
                    <SplitSimulationPanel
                      result={currentResult}
                      imageFile={selectedFile}
                      fullHeight={true}
                      showKPIs={true}
                    />
                  </div>
                ) : (
                  <div className="h-full flex items-center justify-center bg-white rounded-lg border border-gray-200">
                    <div className="text-center">
                      <EyeIcon className="mx-auto h-12 w-12 text-gray-400" />
                      <h3 className="mt-2 text-sm font-medium text-gray-900">No Visual Results Available</h3>
                      <p className="mt-1 text-sm text-gray-500">
                        {!selectedFile ? 'Select a test file to see visual split results' : 'Run a test to see the split line visualization'}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === 'comparison' && (
          <div className="h-full p-6">
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Compare Results</h3>
              <p className="text-sm text-gray-600">Select multiple test results to compare side by side</p>
            </div>
            
            {comparisonResults.length >= 2 ? (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 h-full">
                {comparisonResults.slice(0, 2).map((result, index) => (
                  <div key={result.id} className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                    <div className="px-4 py-3 border-b border-gray-200 bg-gray-50">
                      <div className="flex justify-between items-center">
                        <h4 className="font-medium text-gray-900">{result.fileName}</h4>
                        <span className="text-sm text-gray-500">
                          {new Date(result.timestamp).toLocaleString()}
                        </span>
                      </div>
                      <div className="mt-1 text-sm text-gray-600">
                        {result.sectionsDetected} sections • {result.averageConfidence.toFixed(2)} confidence
                      </div>
                    </div>
                    <div className="p-4 flex-1">
                      <SplitSimulationPanel
                        result={result}
                        imageFile={selectedFile}
                      />
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex items-center justify-center h-64">
                <div className="text-center">
                  <ArrowsRightLeftIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No Comparison Available</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Run at least 2 tests to compare results side by side
                  </p>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'results' && (
          <div className="h-full p-6">
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Test Results History</h3>
              <p className="text-sm text-gray-600">All test results with performance metrics</p>
            </div>
            
            {testResults.length > 0 ? (
              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div className="overflow-y-auto max-h-[calc(100vh-300px)]">
                  <div className="divide-y divide-gray-200">
                    {testResults.map((result) => (
                      <div
                        key={result.id}
                        className={`p-6 cursor-pointer transition-colors hover:bg-gray-50 ${
                          currentResult?.id === result.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                        }`}
                        onClick={() => {
                          setCurrentResult(result);
                          setActiveTab('editor');
                        }}
                      >
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center space-x-3">
                              <h4 className="font-medium text-gray-900">{result.fileName}</h4>
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                {result.accuracy}% accuracy
                              </span>
                            </div>
                            <div className="mt-2 grid grid-cols-3 gap-4 text-sm">
                              <div>
                                <span className="text-gray-500">Sections:</span>
                                <span className="ml-1 font-medium">{result.sectionsDetected}</span>
                              </div>
                              <div>
                                <span className="text-gray-500">Confidence:</span>
                                <span className="ml-1 font-medium">{result.averageConfidence.toFixed(2)}</span>
                              </div>
                              <div>
                                <span className="text-gray-500">Processing:</span>
                                <span className="ml-1 font-medium">{result.processingTime}ms</span>
                              </div>
                            </div>
                          </div>
                          <div className="text-right ml-4">
                            <p className="text-sm text-gray-500">
                              {new Date(result.timestamp).toLocaleString()}
                            </p>
                            <div className="mt-2 flex space-x-2">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  if (comparisonResults.includes(result)) {
                                    setComparisonResults(prev => prev.filter(r => r.id !== result.id));
                                  } else if (comparisonResults.length < 2) {
                                    setComparisonResults(prev => [...prev, result]);
                                  }
                                }}
                                className={`text-xs px-2 py-1 rounded ${
                                  comparisonResults.includes(result)
                                    ? 'bg-blue-100 text-blue-700'
                                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                }`}
                              >
                                {comparisonResults.includes(result) ? 'Remove from Compare' : 'Add to Compare'}
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-64">
                <div className="text-center">
                  <BeakerIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No Test Results</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Run some tests to see results and performance metrics here
                  </p>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'debug' && (
          <div className="h-full flex bg-gray-50">
            {/* Left Sidebar - Logs List */}
            <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
              <div className="p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">AI Logs</h3>
                <div className="mt-2 flex space-x-4 text-sm">
                  <button className="text-blue-600 border-b-2 border-blue-600 pb-1">All</button>
                  <button className="text-gray-500 hover:text-gray-700">Recent Tests</button>
                </div>
              </div>
              
              <div className="flex-1 overflow-y-auto">
                {testResults.length > 0 ? (
                  <div className="divide-y divide-gray-100">
                    {testResults.map((result, index) => (
                      <div 
                        key={result.id}
                        className={`p-4 cursor-pointer hover:bg-gray-50 ${
                          debugInfo?.timestamp === result.timestamp ? 'bg-blue-50 border-r-2 border-blue-500' : ''
                        }`}
                        onClick={() => {
                          // Set debug info for this result
                          setDebugInfo({
                            timestamp: result.timestamp,
                            request: {
                              prompt: currentPrompt,
                              imageSize: selectedFile?.size || 0,
                              fileName: result.fileName
                            },
                            response: {
                              sections: result.sections,
                              processingTime: result.processingTime,
                              accuracy: result.accuracy
                            }
                          });
                        }}
                      >
                        <div className="flex justify-between items-start mb-2">
                          <div className="text-sm font-medium text-blue-600">
                            #{result.id.slice(-6)}
                          </div>
                          <div className="text-xs text-gray-500">
                            {new Date(result.timestamp).toLocaleTimeString()}
                          </div>
                        </div>
                        <div className="text-sm text-gray-900 mb-1">{result.fileName}</div>
                        <div className="flex items-center space-x-4 text-xs text-gray-500">
                          <span>sections: {result.sectionsDetected}</span>
                          <span>confidence: {result.averageConfidence.toFixed(2)}</span>
                          <span>{result.processingTime}ms</span>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="p-4 text-center text-gray-500">
                    <p className="text-sm">No logs yet</p>
                    <p className="text-xs mt-1">Run a test to see AI conversation logs</p>
                  </div>
                )}
              </div>
            </div>

            {/* Right Panel - Log Details */}
            <div className="flex-1 flex flex-col">
              {debugInfo ? (
                <>
                  {/* Header */}
                  <div className="bg-white border-b border-gray-200 p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900">Log Details</h4>
                        <div className="flex items-center space-x-4 mt-1 text-sm text-gray-500">
                          <span>Prompt: Split Detection</span>
                          <span>Created: {new Date(debugInfo.timestamp).toLocaleString()}</span>
                          <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">Success</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Humanloop-style Single View */}
                  <div className="flex-1 overflow-y-auto bg-white">
                    <div className="p-6 space-y-6">
                      {/* Input/Output Header */}
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                            <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                            Input
                          </h5>
                          <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">fileWelcome_to_The_Brandery_-_Logo_Design__Branding___Web_Design_.jpeg</span>
                              <span className="font-mono text-gray-900">{debugInfo.request.fileName}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">size</span>
                              <span className="font-mono text-gray-900">{(debugInfo.request.imageSize / 1024).toFixed(1)} KB</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">prompt_length</span>
                              <span className="font-mono text-gray-900">{debugInfo.request.prompt.length}</span>
                            </div>
                          </div>
                        </div>

                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                            <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                            Output
                          </h5>
                          <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">sections_detected</span>
                              <span className="font-mono text-gray-900">{debugInfo.response.sections?.length || 0}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">avg_confidence</span>
                              <span className="font-mono text-gray-900">
                                {debugInfo.response.sections?.length > 0 
                                  ? (debugInfo.response.sections.reduce((acc: number, s: any) => acc + (s.aiConfidence || 0), 0) / debugInfo.response.sections.length).toFixed(3)
                                  : '0.000'
                                }
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">processing_time</span>
                              <span className="font-mono text-gray-900">{debugInfo.response.processingTime || 0}ms</span>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Prompt Content */}
                      <div>
                        <h5 className="text-sm font-medium text-gray-700 mb-3">Prompt Content</h5>
                        <div className="bg-gray-50 rounded-lg p-4 border-l-4 border-blue-500">
                          <pre className="text-xs font-mono text-gray-800 whitespace-pre-wrap overflow-auto max-h-48">
{debugInfo.request.prompt}
                          </pre>
                        </div>
                      </div>

                      {/* AI Response */}
                      <div>
                        <h5 className="text-sm font-medium text-gray-700 mb-3">AI Response</h5>
                        <div className="bg-gray-50 rounded-lg p-4 border-l-4 border-green-500">
                          <pre className="text-xs font-mono text-gray-800 whitespace-pre-wrap overflow-auto max-h-48">
{debugInfo.rawResponse}
                          </pre>
                        </div>
                      </div>

                      {/* Parsed Output */}
                      {debugInfo.response.sections && debugInfo.response.sections.length > 0 && (
                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-3">
                            Parsed Sections ({debugInfo.response.sections.length})
                          </h5>
                          <div className="space-y-3">
                            {debugInfo.response.sections.map((section: any, index: number) => (
                              <div key={index} className="bg-white border border-gray-200 rounded-lg p-4">
                                <div className="flex justify-between items-start mb-3">
                                  <div className="flex items-center space-x-3">
                                    <span className="text-sm font-medium text-gray-900">{section.name || section.type}</span>
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                      {section.type}
                                    </span>
                                  </div>
                                  <span className="text-sm font-medium text-green-600">
                                    {((section.aiConfidence || 0) * 100).toFixed(1)}%
                                  </span>
                                </div>
                                <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm mb-3">
                                  <div>
                                    <span className="text-gray-500">x:</span>
                                    <span className="ml-1 font-mono">{section.bounds?.x || 0}</span>
                                  </div>
                                  <div>
                                    <span className="text-gray-500">y:</span>
                                    <span className="ml-1 font-mono">{section.bounds?.y || 0}</span>
                                  </div>
                                  <div>
                                    <span className="text-gray-500">width:</span>
                                    <span className="ml-1 font-mono">{section.bounds?.width || 0}</span>
                                  </div>
                                  <div>
                                    <span className="text-gray-500">height:</span>
                                    <span className="ml-1 font-mono">{section.bounds?.height || 0}</span>
                                  </div>
                                </div>
                                {section.detectionReason && (
                                  <div className="text-sm text-gray-600 bg-gray-50 rounded p-2">
                                    <span className="font-medium">Reasoning:</span> {section.detectionReason}
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Performance Metrics Footer */}
                      <div className="bg-gray-50 rounded-lg p-4">
                        <h5 className="text-sm font-medium text-gray-700 mb-3">Performance</h5>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">Response Time:</span>
                            <span className="ml-2 font-mono text-gray-900">{debugInfo.response.processingTime || 0}ms</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Tokens:</span>
                            <span className="ml-2 font-mono text-gray-900">{debugInfo.response.tokensUsed || 'N/A'}</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Cost:</span>
                            <span className="ml-2 font-mono text-gray-900">${(debugInfo.response.costUsd || 0).toFixed(4)}</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Avg Confidence:</span>
                            <span className="ml-2 font-mono text-gray-900">
                              {debugInfo.response.sections?.length > 0 
                                ? (debugInfo.response.sections.reduce((acc: number, s: any) => acc + (s.aiConfidence || 0), 0) / debugInfo.response.sections.length * 100).toFixed(1) + '%'
                                : '0%'
                              }
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <div className="flex-1 flex items-center justify-center bg-white">
                  <div className="text-center">
                    <Cog6ToothIcon className="mx-auto h-12 w-12 text-gray-400" />
                    <h3 className="mt-4 text-lg font-medium text-gray-900">Select a log to view details</h3>
                    <p className="mt-2 text-sm text-gray-500">
                      Choose a test result from the left sidebar to inspect the AI conversation
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'validation' && (
          <div className="h-full p-6">
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Quality Validation Framework</h3>
              <p className="text-sm text-gray-600">Measure prompt performance against ground truth data and industry metrics</p>
            </div>

            {/* Validation Controls */}
            <div className="bg-white rounded-lg border border-gray-200 p-6 mb-6">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h4 className="text-lg font-medium text-gray-900">Validation Dataset</h4>
                  <p className="text-sm text-gray-600 mt-1">
                    {validationDataset.length} test cases loaded
                  </p>
                </div>
                <div className="flex space-x-3">
                  <button
                    onClick={loadValidationDataset}
                    className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    Load Dataset
                  </button>
                  <button
                    onClick={runValidationSuite}
                    disabled={isRunningValidation || validationDataset.length === 0}
                    className="inline-flex items-center px-4 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isRunningValidation ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Running Validation...
                      </>
                    ) : (
                      'Run Validation Suite'
                    )}
                  </button>
                </div>
              </div>

              {/* Dataset Preview */}
              {validationDataset.length > 0 && (
                <div className="border-t pt-4">
                  <h5 className="text-sm font-medium text-gray-700 mb-3">Test Cases:</h5>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                    {validationDataset.map((testCase, index) => (
                      <div key={index} className="bg-gray-50 p-3 rounded border">
                        <div className="text-sm font-medium text-gray-900">{testCase.name}</div>
                        <div className="text-xs text-gray-600 mt-1">
                          Ground truth: {testCase.groundTruth.length} sections
                        </div>
                        <div className="flex flex-wrap gap-1 mt-2">
                          {testCase.groundTruth.map((section: any, sIndex: number) => (
                            <span key={sIndex} className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                              {section.type}
                            </span>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Validation Results */}
            {validationMetrics && (
              <div className="space-y-6">
                {/* Overall Metrics */}
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <h4 className="text-lg font-medium text-gray-900 mb-4">Overall Performance Metrics</h4>
                  <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-600">
                        {(validationMetrics.overallPrecision * 100).toFixed(1)}%
                      </div>
                      <div className="text-sm text-gray-600">Precision</div>
                      <div className="text-xs text-gray-500 mt-1">True Positives / (TP + FP)</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">
                        {(validationMetrics.overallRecall * 100).toFixed(1)}%
                      </div>
                      <div className="text-sm text-gray-600">Recall</div>
                      <div className="text-xs text-gray-500 mt-1">True Positives / (TP + FN)</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-purple-600">
                        {(validationMetrics.overallF1 * 100).toFixed(1)}%
                      </div>
                      <div className="text-sm text-gray-600">F1 Score</div>
                      <div className="text-xs text-gray-500 mt-1">Harmonic mean of P & R</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-600">
                        {(validationMetrics.avgIoU * 100).toFixed(1)}%
                      </div>
                      <div className="text-sm text-gray-600">Avg IoU</div>
                      <div className="text-xs text-gray-500 mt-1">Bounding box overlap</div>
                    </div>
                  </div>
                  
                  {/* Quality Assessment */}
                  <div className="mt-6 p-4 rounded-lg bg-gray-50">
                    <h5 className="text-sm font-medium text-gray-900 mb-2">Quality Assessment</h5>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Overall Quality:</span>
                        <span className={`font-medium ${
                          validationMetrics.overallF1 > 0.85 ? 'text-green-600' :
                          validationMetrics.overallF1 > 0.7 ? 'text-yellow-600' : 'text-red-600'
                        }`}>
                          {validationMetrics.overallF1 > 0.85 ? 'Excellent' :
                           validationMetrics.overallF1 > 0.7 ? 'Good' : 'Needs Improvement'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Boundary Accuracy:</span>
                        <span className={`font-medium ${
                          validationMetrics.avgIoU > 0.7 ? 'text-green-600' :
                          validationMetrics.avgIoU > 0.5 ? 'text-yellow-600' : 'text-red-600'
                        }`}>
                          {validationMetrics.avgIoU > 0.7 ? 'High' :
                           validationMetrics.avgIoU > 0.5 ? 'Medium' : 'Low'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Tests Passed:</span>
                        <span className="font-medium text-gray-900">
                          {validationMetrics.results.filter((r: any) => r.f1Score > 0.7).length} / {validationMetrics.totalTests}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Detailed Results */}
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <h4 className="text-lg font-medium text-gray-900 mb-4">Detailed Test Results</h4>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Test Case</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sections</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precision</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recall</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">F1 Score</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {validationMetrics.results.map((result: any, index: number) => (
                          <tr key={index}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {result.testCase}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {result.aiSections} / {result.gtSections}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {(result.precision * 100).toFixed(1)}%
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {(result.recall * 100).toFixed(1)}%
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {(result.f1Score * 100).toFixed(1)}%
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                result.f1Score > 0.85 ? 'bg-green-100 text-green-800' :
                                result.f1Score > 0.7 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'
                              }`}>
                                {result.f1Score > 0.85 ? 'Excellent' :
                                 result.f1Score > 0.7 ? 'Good' : 'Poor'}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Recommendations */}
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <h4 className="text-lg font-medium text-gray-900 mb-4">Improvement Recommendations</h4>
                  <div className="space-y-3">
                    {validationMetrics.overallPrecision < 0.8 && (
                      <div className="flex items-start space-x-3 p-3 bg-red-50 rounded-lg">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-red-800">High False Positive Rate</h5>
                          <p className="text-sm text-red-700 mt-1">The AI is detecting sections that don't exist. Consider refining the prompt to be more conservative in section detection.</p>
                        </div>
                      </div>
                    )}
                    
                    {validationMetrics.overallRecall < 0.8 && (
                      <div className="flex items-start space-x-3 p-3 bg-yellow-50 rounded-lg">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-yellow-800">Missing Sections</h5>
                          <p className="text-sm text-yellow-700 mt-1">The AI is missing important sections. Consider adding more detailed section type descriptions to the prompt.</p>
                        </div>
                      </div>
                    )}

                    {validationMetrics.avgIoU < 0.6 && (
                      <div className="flex items-start space-x-3 p-3 bg-blue-50 rounded-lg">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-blue-800">Boundary Accuracy Issues</h5>
                          <p className="text-sm text-blue-700 mt-1">Section boundaries are not precise. Consider adding more specific instructions about boundary detection in the prompt.</p>
                        </div>
                      </div>
                    )}

                    {validationMetrics.overallF1 > 0.85 && (
                      <div className="flex items-start space-x-3 p-3 bg-green-50 rounded-lg">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-green-800">Excellent Performance</h5>
                          <p className="text-sm text-green-700 mt-1">Your prompt is performing very well! Consider this a baseline for future improvements.</p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Empty State */}
            {!validationMetrics && (
              <div className="text-center py-12">
                <CheckCircleIcon className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No Validation Results</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Load a validation dataset and run the validation suite to see quality metrics
                </p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
